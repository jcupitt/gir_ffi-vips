- need to unwrap RefString

  try

	require 'vips8'
	a = Vips::Image.new_from_file "/data/john/pics/poosausage.jpg"
	a.get_value "exif-ifd0-Orientation"
	=> #<Vips::RefString:0x000000033379f0 @struct=# ...

  added something to unwrap, but it's not working? check

- this fails:

	require 'vips8'
	$vips_debug = true
	Vips::cache_set_max 0
	im = Vips::Image.new_from_file "/home/john/pics/k2.jpg"
	puts ""
	puts "** after new_from_file"
	GC.start
	Vips::Object::print_all
	im.write_to_file("x.v")

  segv ... im is unreffed by the GC

  when we get_value from the GValue, do we need to create a new reference?

  we should, we are making a new ruby wrapping of a gobject

  see examples/test_leak5.rb

  experiment with adding Vips::cache_print, makes it easier to see which refs
  are held by the cache





- see https://github.com/mvz/gir_ffi/issues/54

  gir_ffi needs to track transfer notation

- test maxpos etc., part of the binding, not part of libvips

- need to add [] and () overloads 

- ruby () overload could accept ranges, eg.

        x = im(2..100, 2..100)

  and return an image, cf. crop

- add some more tests

- test docs

- what about docs for VipsPrecision etc. ? can we just refer to the libvips
  API docs? we do that for VipsAccess in the intro

- something to make a VipsInterpolate from a symbol? try calling affine and
  setting an interpolator

	x = Vips::Interpolate.new "bilinear"

  works ... try adding code to set_value

  add a note on this to the intro

- why doesn't this example code work?

# == Command-line option parsing
#
# GLib includes a command-line option parser, and libvips defines a set of 
# standard flags you can use with it. For example:
#
#   require 'vips8'
#
#   context = GLib::OptionContext.new " - test stuff"
#   main_group = GLib::OptionGroup "main", 
#     "Main options", "Main options for this program", nil
#   context.set_main_group main_group
#   Vips::add_option_entries main_group
#   context.parse ARGV
#
